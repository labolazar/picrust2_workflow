[["index.html", "Scripts from the Lazar Lab 1 Introduction", " Scripts from the Lazar Lab 1 Introduction This guide is a collection of diverse scripts produced by members of the Lazar Lab to analyze data from amplicon sequencing. The scripts assume that the raw reads were previously proccessed through the DADA2 pipeline and the users have the following : Amplicon sequence variant (ASV) abundance table Taxonomy table Sample metadata table For any questions or comments please email : karine.villeneuve12@gmail.com Enjoy and happy data analysis ! "],["picrust2.html", "2 PICRUST2 2.1 Installing PICRUST 2.2 Required input files 2.3 Run full PICRUST2 pipeline 2.4 Output", " 2 PICRUST2 PICRUST2 wiki 2.1 Installing PICRUST If PICRUST2 is not already installed on your system it can be installed with mamba or from source. It is recommended that users use the mamba package, which is a reimplementation of conda in C++, which typically increases the installation time substantially (the default conda can sometimes get stuck solving environments for hours at a time, which is a problem facing conda environments in general). The following code installs PICRUST2 using mamba: mamba create -n picrust2 -c bioconda -c conda-forge picrust2=2.5.2 2.2 Required input files FASTA of amplicon sequences variants (ASVs; i.e. your representative sequences, not your raw reads) Tab-delimited table with ASV ids as the first column and sample abundances as all subsequent columns Example of both files : 2.3 Run full PICRUST2 pipeline Activate the environnement mamba activate picrust2 Run the full default pipeline picrust2_pipeline.py -s fasta_file.fna -i asv_file.tsv -o picrust2_out -p 12 Main options : -s PATH - FASTA of unaligned study sequences -i PATH - Input table of sequence abundances (BIOM, TSV, or mothur shared file format) -o PATH - Output folder -p INT: Number of processes to run in parallel. --skip_norm - Skip normalizing sequence abundances by predicted marker gene copy numbers (typically 16S rRNA genes). This step will be performed automatically unless this option is specified (added in v2.2.0-b). --remove_intermediate - Remove the intermediate outfiles of the sequence placement and pathway inference steps. --verbose - If specified, print out wrapped commands to screen. See wiki for further options. 2.4 Output EC_metagenome_out - Folder containing unstratified EC number metagenome predictions pred_metagenome_unstrat.tsv.gz sequence table normalized by predicted 16S copy number abundances (seqtab_norm.tsv.gz), and the per-sample NSTI values weighted by the abundance of each ASV (weighted_nsti.tsv.gz). KO_metagenome_out - As EC_metagenome_out above, but for KO metagenomes. pathways_out - Folder containing predicted pathway abundances and coverages per-sample, based on predicted EC number abundances. "],["titan2.html", "3 TITAN2 3.1 Required input files 3.2 Run TITAN2 3.3 Output", " 3 TITAN2 Threshold Indicator Taxa Analysis Paper Official tutorial Other tutorial 3.1 Required input files The environmental gradient to be tested (i.e., a vector) The compositionnal matrix (all taxa must occur at least 3 times) 3.1.1 Generating the required input files Starting from our ASV table and sample metadata file. # Load required librarires library(dplyr) library(TITAN2) # load tables into R asv = read.csv(file = &quot;asv.csv&quot;, row.names=1, header=TRUE, check.names=FALSE) env = read.csv(file = &quot;meta.csv&quot;, row.names=1, header=TRUE, check.names=FALSE) # ASV table # Taxa must occur at least 3 times # To remove taxa not meeting this requirement we convert matrix to presence/absence # Create new data frame to be converted to presence/absence presabs = asv # Convert to presence/absence presabs[presabs &gt; 0] &lt;- 1 # Keep rows with rowSums &gt; 3 filtered_presabs = presabs[rowSums(presabs[]) &gt; 3,] # Keep rows from the original table that are found in the filtered presence/absence matrix (rowSums &gt; 3) asv_filt = asv[row.names(asv) %in% row.names(filtered_presabs),] # Transpose table so that samples are rows and taxa are columns tasv = as.data.frame(t(asv_filt)) # Metadata table # Keep only column which corresponds to our variable of interest env_filt = envsub[c(&quot;variable&quot;)] 3.2 Run TITAN2 titan_out = titan(env_filt, tasv) Main options : minSplt – the minimum split size to use during partitioning. Default is 5. In other words, the smallest number of samples in z- or z+ will be 5; all other samples will be in the other group. numPerm – number of random permutations to be used during ISA – these are used to derive a distribution of IndVal values for each species. Default is 250, but package authors recommend increasing this to 500 or 1000 during formal analyses so there is less variation among runs. However, increasing this necessarily increases computation time. boot – whether to conduct bootstrap resampling (TRUE) or not (FALSE). Default is to do so (and is strongly recommended by package authors). nBoot – number of replicates to use during bootstrap resampling. Default is 500, but package authors recommend using 500 or 1000 for formal analyses. imax – whether to determine taxon-specific change points based on indicator value (IndVal) maxima (TRUE) or z-score maxima (FALSE; the default). -ivTot – whether to calculate indicator value (IndVal) scores using total relative abundance (TRUE) or mean relative abundance (FALSE; the default). pur.cut – cut-off proportion for determining purity (pure response direction) across bootstrap replicates. The default (0.95) means that 95% of the results from bootstrap replicates agree with the observed response direction. -rel.cut – cut-off proportion for determining reliability (reliable response magnitude) across bootstrap replicates. The default (0.95) means that 95% of the results from bootstrap replicates have an IndVal p-value &lt; 0.05. 3.3 Output The species that respond strongly and consistently (i.e., that meet the purity and reliability criteria) are flagged with values of 1 or 2 in the ‘filter’ column. To filter the results to just these species : df = titan_out$sppmax %&gt;% as.data.frame() %&gt;% select(zenv.cp, freq, maxgrp, IndVal, purity, reliability, filter) %&gt;% filter(filter != 0) %&gt;% arrange(maxgrp, zenv.cp) A community-level summary of how change relates to the environmental variable is accomplished by adding up the responses of the species in each group. This can be done for all species (sumz- and sumz+) or for the filtered subset that meet the purity and reliability criteria (fsumz- and fsumz+). titan_out$sumz %&gt;% round(3) The cp column reports the change points at which the community most strongly responded to the environmental variables. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
